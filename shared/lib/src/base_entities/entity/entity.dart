import 'package:shared/app_strings.dart';
import 'package:shared/src/base_entities/entity/entity_interface.dart';

enum EntityState { deleted }

class Entity implements EntityInterface {
  String id;
  late String? name;
  DateTime dateCreated;
  DateTime dateUpdated;
  bool flagForDeletion = false;
  Entity(
      {
      required this.id,
      this.name,
      required this.dateCreated,
      required this.dateUpdated,
      this.flagForDeletion = false}){
        name ??= "";
      }

  Entity.fromEntity({required Entity entity})
      : id = entity.id,
        name = entity.name,
        dateCreated = entity.dateCreated,
        dateUpdated = entity.dateUpdated,
        flagForDeletion = entity.flagForDeletion;

  @override
   Map<String, dynamic> toJson() => {
        'id': id,
        'name': name,
        'dateCreated': dateCreated.toUtc().toIso8601String(),
        'dateUpdated': dateUpdated.toUtc().toIso8601String(),
        'flagForDeletion': flagForDeletion.toString()
      };
  @override
   Map<String, dynamic> toJsonTransfer() => {
        'id': id,
        'name': name,
        'dateCreated': dateCreated.toUtc().toIso8601String(),
        'dateUpdated': dateUpdated.toUtc().toIso8601String()
      };

  @override
  joinData() => [
        id,
        name,
        dateCreated.toUtc().toIso8601String(),
        dateUpdated.toUtc().toIso8601String()
      ].join('|');
  //GENERATED BY CHATGPT.  FNV-1a hash algorithm
  @override
  getChecksum() {
    int _fnv1aHash(String data) {
      const int fnvPrime = 0x01000193;
      int hash = 0x811c9dc5;

      for (int i = 0; i < data.length; i++) {
        hash ^= data.codeUnitAt(i);
        hash = (hash * fnvPrime) & 0xFFFFFFFF;
      }
      return hash;
    }

    int hash = _fnv1aHash(this.joinData());
    return hash.toRadixString(16).padLeft(8, '0');
  }
}

class EntityFactory<T extends Entity>
    implements EntityFactoryInterface<T> {
  @override
  Entity fromJson(Map<String, dynamic> json){
    return Entity(
        id: json['id'],
        name: json['name'],
        dateCreated: DateTime.parse(json['dateCreated'] ?? Default_FallbackDate),
      dateUpdated: DateTime.parse(json['dateUpdated'] ?? Default_FallbackDate),
      flagForDeletion: json['flagForDeletion'] == "true",);
  }
}
