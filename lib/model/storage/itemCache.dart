import 'dart:convert';
import 'dart:io';
import 'package:build_stats_flutter/model/entity/checklist.dart';
import 'package:build_stats_flutter/model/entity/item.dart';
import 'package:build_stats_flutter/model/entity/worksite.dart';
import 'package:build_stats_flutter/model/storage/FileAccess.dart';
import 'package:build_stats_flutter/resources/app_strings.dart';
import 'package:localstorage/localstorage.dart';

class ItemCache {
  //final Map<int, Item?> _itemCache = {};
  Future<Item?> GetItemById(String id) async {
    Item? item;
    String? itemJson = localStorage.getItem(id);
    if (itemJson != null) {
      item = Item.fromJson(jsonDecode(itemJson));
    } else {
      item = await LoadItemById(id);
    }
    return item;
  }

  //Initially Generated by CHATGPT
  Future<Item?> LoadItemById(String id) async {
    // Get the directory of the application documents
    final file = await FileAccess().getDataFile(
        'data.json'); //TODO: need to change to dependency injection when I know how.

    // Check if the file exists
    if (await file.exists()) {
      // Read the JSON file
      String jsonString = await file.readAsString();

      // Decode the JSON string into a List of dynamic objects
      List<dynamic> jsonData = jsonDecode(jsonString);

      // Convert the dynamic objects into a List of Worksite objects
      List<Worksite> worksites =
          jsonData.map((json) => Worksite.fromJson(json)).toList();

      // Traverse the hierarchy to find the Item with the given ID
      for (Worksite worksite in worksites) {
        for (Checklist checklist in worksite.checklists) {
          for (Item item in checklist.items) {
            if (item.id == id) {
              return item;
            }
          }
        }
      }
    }

    // If the item is not found, return null
    return null;
  }

  //Initially Generated by CHATGPT
  Future<Item> SaveItem(Item item) async {
    // Get the directory of the application documents
    final directory = DataDirectoryPath;
    final file = File('${directory}/data.json');

    List<Worksite> worksites = [];

    // Check if the file exists
    if (await file.exists()) {
      // Read the JSON file
      String jsonString = await file.readAsString();

      // Decode the JSON string into a List of dynamic objects
      List<dynamic> jsonData = jsonDecode(jsonString);

      // Convert the dynamic objects into a List of Worksite objects
      worksites = jsonData.map((json) => Worksite.fromJson(json)).toList();
    }

    // Flag to check if the item was saved
    bool itemSaved = false;

    // Traverse the hierarchy to find where to save the item
    for (Worksite worksite in worksites) {
      if (worksite.id == item.checklist?.worksiteId) {
        for (Checklist checklist in worksite.checklists) {
          if (checklist.id == item.checklistId) {
            // Check if the item already exists
            int itemIndex = checklist.items.indexWhere((i) => i.id == item.id);
            if (itemIndex != -1) {
              // Update the existing item
              checklist.items[itemIndex] = item;
            } else {
              // Add the new item
              checklist.items.add(item);
            }
            itemSaved = true;
            break;
          }
        }

        // If the checklist was not found, create a new one
        if (!itemSaved) {
          Checklist newChecklist =
              Checklist(id: item.checklistId, items: [item]);
          worksite.checklists.add(newChecklist);
          itemSaved = true;
        }
        break;
      }
    }

    // If the worksite was not found, create a new one
    if (!itemSaved) {
      Worksite newWorksite = Worksite(
        id: item.worksiteId,
        checklists: [
          Checklist(id: item.checklistId, items: [item])
        ],
      );
      worksites.add(newWorksite);
    }

    // Encode the worksites back to JSON and save to the file
    String updatedJson =
        jsonEncode(worksites.map((worksite) => worksite.toJson()).toList());
    await file.writeAsString(updatedJson);
  }
}
