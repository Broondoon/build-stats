import 'dart:convert';
import 'package:build_stats_flutter/model/entity/checklist.dart';
import 'package:build_stats_flutter/model/storage/data_sync/data_connection.dart';
import 'package:build_stats_flutter/model/storage/local_storage/file_access.dart';
import 'package:build_stats_flutter/model/storage/item_cache.dart';
import 'package:build_stats_flutter/resources/app_strings.dart';
import 'package:localstorage/localstorage.dart';

class ChecklistCache {
  //final Map<int, Item?> _itemCache = {};
  static Future<Checklist?> GetChecklistById(String id) async {
    Checklist? checklist;
    String? checklistJson = localStorage.getItem(id);
    if (checklistJson != null) {
      checklist = Checklist.fromJson(jsonDecode(checklistJson));
    } else {
      checklist = await LoadChecklistById(id);
    }
    if (checklist != null) {
      checklist.items = [];
      for (var x in checklist.itemIds) {
        await ItemCache.GetItemById(x)
            .then((item) => {checklist?.items.add(item!)});
      }
    }
    return checklist;
  }

  static Future<List<Checklist>> _getChecklists() async {
    List<Checklist> checklists = [];
    if (!(await DataConnection.CheckConnection())) {
      String jsonString =
          await FileAccess.ReadJsonDataFile(ChecklistFileString);
      if (jsonString.isNotEmpty) {
        List<dynamic> jsonData = jsonDecode(jsonString);
        checklists = jsonData.map((json) => Checklist.fromJson(json)).toList();
      }
    }
    return checklists;
  }

  //Initially Generated by CHATGPT
  static Future<Checklist?> LoadChecklistById(String id) async {
    List<Checklist> checklists = await _getChecklists();

    if (checklists.isEmpty) {
      return null;
    }

    // Traverse the hierarchy to find the Checklist with the given ID
    for (Checklist checklist in checklists) {
      if (localStorage.getItem(checklist.id) == null) {
        localStorage.setItem(checklist.id, jsonEncode(checklist.toJson()));
      }
      if (checklist.id == id) {
        return checklist;
      }
    }
    // If the item is not found, return null
    return null;
  }

  static Future<Null> StoreChecklist(Checklist checklist) async {
    localStorage.setItem(checklist.id, jsonEncode(checklist.toJson()));
    await SaveChecklist(checklist);
  }

  //Initially Generated by CHATGPT
  static Future<Null> SaveChecklist(Checklist checklist) async {
    List<Checklist> checklists = await _getChecklists();
    // Flag to check if the checklist was saved
    // Traverse the hierarchy to find where to save the checklist
    int checklistIndex = checklists.indexWhere((i) => i.id == checklist.id);
    if (checklistIndex != -1) {
      checklists[checklistIndex] = checklist;
    } else {
      checklists.add(checklist);
    }
    // Encode the checklists back to JSON and save to the file
    String updatedJson =
        jsonEncode(checklists.map((checklist) => checklist.toJson()).toList());
    await FileAccess.SaveDataFile(ChecklistFileString, updatedJson);
  }
}
