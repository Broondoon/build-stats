import 'dart:collection';
import 'dart:convert';
import 'dart:math';
import 'package:build_stats_flutter/model/Domain/ServiceInterface/data_connection_service.dart';
import 'package:build_stats_flutter/model/entity/checklist.dart';
import 'package:build_stats_flutter/model/Domain/ServiceInterface/cache_service.dart';
import 'package:build_stats_flutter/model/storage/data_sync/data_connection.dart';
import 'package:build_stats_flutter/model/storage/local_storage/file_access.dart';
import 'package:build_stats_flutter/model/storage/item_cache.dart';
import 'package:build_stats_flutter/resources/app_strings.dart';
import 'package:localstorage/localstorage.dart';

class ChecklistCache implements CacheService<ChecklistDay> {
  final DataConnectionService<ChecklistDay> _dataConnectionService;
  ChecklistCache(this._dataConnectionService);

  @override
  Future<ChecklistDay?> getById(String key) async {
    ChecklistDay? checklistDay;
    String? checklistDayJson = localStorage.getItem(key);
    if (checklistDayJson != null) {
      checklistDay = ChecklistDay.fromJson(jsonDecode(checklistDayJson));
    } else {
      checklistDay = await load(key);
    }
    return checklistDay;
  }

  @override
  Future<void> delete(String key) {
    // TODO: implement delete
    throw UnimplementedError();
  }

  @override
  Future<ChecklistDay> load(String key) {
    // TODO: implement load
    throw UnimplementedError();
  }

  @override
  Future<void> save(String key, value) {
    // TODO: implement save
    throw UnimplementedError();
  }

  @override
  Future<void> store(String key, value) {
    // TODO: implement store
    throw UnimplementedError();
  }

  @override
  Future<HashMap<String, String>> getCacheCheckSums() {
    // TODO: implement getCacheCheckSums
    throw UnimplementedError();
  }

  // static Future<ChecklistDay> CreateNewChecklist() async {
  //   //randomly generate a number for the id
  //   Checklist newChecklistDa = Checklist(id: "-1", items: []);
  //   if (localStorage.getItem(checklist.id) == null) {
  //       localStorage.setItem(checklist.id, jsonEncode(checklist.toJson()));
  //     }
  //   return newChecklist;
  // }

  // static Future<List<ChecklistDay>> _getChecklists() async {
  //   List<Checklist> checklists = [];
  //   if (!(await DataConnection.CheckConnection())) {
  //     String jsonString =
  //         await FileAccess.ReadJsonDataFile(ChecklistFileString);
  //     if (jsonString.isNotEmpty) {
  //       List<dynamic> jsonData = jsonDecode(jsonString);
  //       checklists = jsonData.map((json) => Checklist.fromJson(json)).toList();
  //     }
  //   }
  //   return checklists;
  // }

  // //Initially Generated by CHATGPT
  // static Future<Checklist?> LoadChecklistById(String id) async {
  //   List<Checklist> checklists = await _getChecklists();

  //   if (checklists.isEmpty) {
  //     return null;
  //   }

  //   // Traverse the hierarchy to find the Checklist with the given ID
  //   for (Checklist checklist in checklists) {
  //     if (localStorage.getItem(checklist.id) == null) {
  //       localStorage.setItem(checklist.id, jsonEncode(checklist.toJson()));
  //     }
  //     if (checklist.id == id) {
  //       return checklist;
  //     }
  //   }
  //   // If the item is not found, return null
  //   return null;
  // }

  // static Future<Null> StoreChecklist(Checklist checklist) async {
  //   localStorage.setItem(checklist.id, jsonEncode(checklist.toJson()));
  //   await SaveChecklist(checklist);
  // }

  // //Initially Generated by CHATGPT
  // static Future<Null> SaveChecklist(Checklist checklist) async {
  //   List<Checklist> checklists = await _getChecklists();
  //   // Flag to check if the checklist was saved
  //   // Traverse the hierarchy to find where to save the checklist
  //   int checklistIndex = checklists.indexWhere((i) => i.id == checklist.id);
  //   if (checklistIndex != -1) {
  //     checklists[checklistIndex] = checklist;
  //   } else {
  //     checklists.add(checklist);
  //   }
  //   // Encode the checklists back to JSON and save to the file
  //   String updatedJson =
  //       jsonEncode(checklists.map((checklist) => checklist.toJson()).toList());
  //   await FileAccess.SaveDataFile(ChecklistFileString, updatedJson);
  // }
}
