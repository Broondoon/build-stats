import 'dart:convert';
import 'package:build_stats_flutter/model/entity/item.dart';
import 'package:build_stats_flutter/model/storage/data_sync/data_connection.dart';
import 'package:build_stats_flutter/model/storage/local_storage/file_access.dart';
import 'package:build_stats_flutter/resources/app_strings.dart';
import 'package:localstorage/localstorage.dart';

class ItemCache {
  //final Map<int, Item?> _itemCache = {};
  static Future<Item?> GetItemById(String id) async {
    Item? item;
    String? itemJson = localStorage.getItem(id);
    if (itemJson != null) {
      item = Item.fromJson(jsonDecode(itemJson));
    } else {
      item = await LoadItemById(id);
    }
    return item;
  }

  static Future<List<Item>> _getItems() async {
    List<Item> items = [];
    if (!(await DataConnection.CheckConnection())) {
      String jsonString = await FileAccess.ReadJsonDataFile(ItemFileString);
      if (jsonString.isNotEmpty) {
        List<dynamic> jsonData = jsonDecode(jsonString);
        items = jsonData.map((json) => Item.fromJson(json)).toList();
      }
    }
    return items;
  }

  //Initially Generated by CHATGPT
  static Future<Item?> LoadItemById(String id) async {
    List<Item> items = await _getItems();
    if (items.isEmpty) {
      return null;
    }

    // Traverse the hierarchy to find the Item with the given ID
    for (Item item in items) {
      if (localStorage.getItem(item.id) == null) {
        localStorage.setItem(item.id, jsonEncode(item.toJson()));
      }
      if (item.id == id) {
        return item;
      }
    }
    // If the item is not found, return null
    return null;
  }

  static Future<Null> StoreItem(Item item) async {
    localStorage.setItem(item.id, jsonEncode(item.toJson()));
    await SaveItem(item);
  }

  //Initially Generated by CHATGPT
  static Future<Null> SaveItem(Item item) async {
    List<Item> items = await _getItems();
    // Flag to check if the item was saved
    // Traverse the hierarchy to find where to save the item
    int itemIndex = items.indexWhere((i) => i.id == item.id);
    if (itemIndex != -1) {
      items[itemIndex] = item;
    } else {
      items.add(item);
    }
    // Encode the items back to JSON and save to the file
    String updatedJson =
        jsonEncode(items.map((item) => item.toJson()).toList());
    await FileAccess.SaveDataFile(ItemFileString, updatedJson);
  }
}
