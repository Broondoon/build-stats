// Mocks generated by Mockito 5.4.4 from annotations
// in shared/test/cache_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:build_stats_flutter/model/entity/item.dart';
import 'package:mockito/mockito.dart' as _i1;
import 'dart:async' as _i2;
import 'dart:collection' as _i8;
import 'dart:convert' as _i12;
import 'package:shared/src/base_entities/entity/entity.dart' as _i3;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:shared/src/base_services/cache/localStorage.dart' as _i5;
import 'package:mutex/mutex.dart' as _i6;
import 'package:shared/src/base_entities/item/item.dart' as _i7;
import 'package:stream_channel/stream_channel.dart' as _i11;
import 'package:shared/checklist.dart' as _i14;
import 'package:build_stats_flutter/model/Domain/Service/data_connection_service.dart'
    as _i16;
import 'package:build_stats_flutter/model/Domain/Service/file_IO_service.dart'
    as _i15;
import 'package:build_stats_flutter/model/storage/local_storage/file_access.dart'
    as _i17;
import 'package:build_stats_flutter/model/entity/checklist.dart' as _i18;
import 'package:build_stats_flutter/model/entity/item.dart' as _i19;
import 'package:build_stats_flutter/model/entity/user.dart' as _i20;
import 'package:build_stats_flutter/model/entity/worksite.dart' as _i21;
import 'package:build_stats_flutter/model/storage/checklist_cache.dart' as _i22;
import 'package:build_stats_flutter/model/storage/item_cache.dart' as _i23;
import 'package:build_stats_flutter/model/storage/worksite_cache.dart' as _i24;
// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Entity].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntity extends _i1.Mock implements _i3.Entity {
  MockEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
  @override
  Map<String, dynamic> toJsonTransfer() => (super.noSuchMethod(
        Invocation.method(
          #toJsonTransfer,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJsonTransfer,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i5.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<MapEntry<String, String>> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: <MapEntry<String, String>>[],
      ) as List<MapEntry<String, String>>);

  @override
  _i2.Future<String?> getItem(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [key],
        ),
        returnValue: _i2.Future<String?>.value(),
      ) as _i2.Future<String?>);

  @override
  _i2.Future<void> setItem(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeItem(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [EntityFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityFactory<T extends _i3.Entity> extends _i1.Mock
    implements _i3.EntityFactory<T> {
  MockEntityFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Entity fromJson(Map<String, dynamic>? json) =>
      super.noSuchMethod(Invocation.method(
        #fromJson,
        [json],
      ));
}

/// A class which mocks [BaseItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseItem extends _i1.Mock implements _i7.BaseItem {
  MockBaseItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistDayId => (super.noSuchMethod(
        Invocation.getter(#checklistDayId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistDayId),
        ),
      ) as String);

  @override
  set checklistDayId(String? _checklistDayId) => super.noSuchMethod(
        Invocation.setter(
          #checklistDayId,
          _checklistDayId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unit(String? _unit) => super.noSuchMethod(
        Invocation.setter(
          #unit,
          _unit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set desc(String? _desc) => super.noSuchMethod(
        Invocation.setter(
          #desc,
          _desc,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set result(String? _result) => super.noSuchMethod(
        Invocation.setter(
          #result,
          _result,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creatorId(String? _creatorId) => super.noSuchMethod(
        Invocation.setter(
          #creatorId,
          _creatorId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set verified(bool? _verified) => super.noSuchMethod(
        Invocation.setter(
          #verified,
          _verified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ReadWriteMutex].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadWriteMutex extends _i1.Mock implements _i6.ReadWriteMutex {
  MockReadWriteMutex() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLocked => (super.noSuchMethod(
        Invocation.getter(#isLocked),
        returnValue: false,
      ) as bool);

  @override
  bool get isWriteLocked => (super.noSuchMethod(
        Invocation.getter(#isWriteLocked),
        returnValue: false,
      ) as bool);

  @override
  bool get isReadLocked => (super.noSuchMethod(
        Invocation.getter(#isReadLocked),
        returnValue: false,
      ) as bool);

  @override
  _i2.Future<dynamic> acquireRead() => (super.noSuchMethod(
        Invocation.method(
          #acquireRead,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);

  @override
  _i2.Future<dynamic> acquireWrite() => (super.noSuchMethod(
        Invocation.method(
          #acquireWrite,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<T> protectRead<T>(_i2.Future<T> Function()? criticalSection) =>
      (super.noSuchMethod(
        Invocation.method(
          #protectRead,
          [criticalSection],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #protectRead,
                  [criticalSection],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #protectRead,
                [criticalSection],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> protectWrite<T>(_i2.Future<T> Function()? criticalSection) =>
      (super.noSuchMethod(
        Invocation.method(
          #protectWrite,
          [criticalSection],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #protectWrite,
                  [criticalSection],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #protectWrite,
                [criticalSection],
              ),
            ),
      ) as _i2.Future<T>);
}

class TestReadWriteMutex extends MockReadWriteMutex {
  bool _isWriteLocked = false;

  @override
  bool get isWriteLocked => _isWriteLocked;

  @override
  Future<T> protectWrite<T>(Future<T> Function()? criticalSection) async {
    _isWriteLocked = true;
    try {
      if (criticalSection != null) {
        return await criticalSection();
      } else {
        throw ArgumentError('criticalSection cannot be null');
      }
    } finally {
      _isWriteLocked = false;
    }
  }

  @override
  Future<T> protectRead<T>(Future<T> Function()? criticalSection) async {
    if (criticalSection != null) {
      return await criticalSection();
    } else {
      throw ArgumentError('criticalSection cannot be null');
    }
  }
}

class FakeLocalStorage implements _i5.LocalStorage {
  final Map<String, String> _storage = {};

  @override
  Future<String?> getItem(String key) async {
    return _storage[key];
  }

  @override
  Future<void> setItem(String key, String value) async {
    _storage[key] = value;
  }

  @override
  Future<void> removeItem(String key) async {
    _storage.remove(key);
  }

  @override
  List<String> get keys => _storage.keys.toList();

  @override
  List<String> get values => _storage.values.toList();

  @override
  List<MapEntry<String, String>> get entries => _storage.entries.toList();
}

/// A class which mocks [DataConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectionService<T extends _i3.Entity> extends _i1.Mock
    implements _i16.DataConnectionService<T> {
  MockDataConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<String> get(String? path) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
        ),
        returnValue: _i2.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #get,
            [path],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<String> post(
    String? path,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            path,
            value,
          ],
        ),
        returnValue: _i2.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #post,
            [
              path,
              value,
            ],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<String> put(
    String? path,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            path,
            value,
          ],
        ),
        returnValue: _i2.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #put,
            [
              path,
              value,
            ],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<void> delete(
    String? path,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            path,
            keys,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [FileIOService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileIOService<T extends _i3.Entity> extends _i1.Mock
    implements _i15.FileIOService<T> {
  MockFileIOService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<List<T>?> readDataFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readDataFile,
          [path],
        ),
        returnValue: _i2.Future<List<T>?>.value(),
      ) as _i2.Future<List<T>?>);

  @override
  _i2.Future<T?> readDataFileByKey(
    String? path,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDataFileByKey,
          [
            path,
            key,
          ],
        ),
        returnValue: _i2.Future<T?>.value(),
      ) as _i2.Future<T?>);

  @override
  _i2.Future<bool> saveDataFile(
    String? path,
    List<T>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDataFile,
          [
            path,
            data,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteDataFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteDataFile,
          [path],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteFromDataFile(
    String? path,
    List<String>? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFromDataFile,
          [
            path,
            key,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

class _FakeWorksiteFactory_0 extends _i1.SmartFake
    implements _i21.WorksiteFactory {
  _FakeWorksiteFactory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorksite_1 extends _i1.SmartFake implements _i21.Worksite {
  _FakeWorksite_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChecklist_2 extends _i1.SmartFake implements _i18.Checklist {
  _FakeChecklist_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChecklistDay_3 extends _i1.SmartFake implements _i18.ChecklistDay {
  _FakeChecklistDay_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeItemFactory_4 extends _i1.SmartFake implements _i19.ItemFactory {
  _FakeItemFactory_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeItem_5 extends _i1.SmartFake implements _i19.Item {
  _FakeItem_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_6 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReadWriteMutex_7 extends _i1.SmartFake
    implements _i6.ReadWriteMutex {
  _FakeReadWriteMutex_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WorksiteCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksiteCache extends _i1.Mock implements _i24.WorksiteCache {
  MockWorksiteCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.WorksiteFactory get parser => (super.noSuchMethod(
        Invocation.getter(#parser),
        returnValue: _FakeWorksiteFactory_0(
          this,
          Invocation.getter(#parser),
        ),
      ) as _i21.WorksiteFactory);

  @override
  set parser(_i21.WorksiteFactory? _parser) => super.noSuchMethod(
        Invocation.setter(
          #parser,
          _parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<List<_i21.Worksite>?> getUserWorksites(_i20.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserWorksites,
          [user],
        ),
        returnValue: _i2.Future<List<_i21.Worksite>?>.value(),
      ) as _i2.Future<List<_i21.Worksite>?>);

  @override
  _i2.Future<_i21.Worksite?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i21.Worksite?>.value(),
      ) as _i2.Future<_i21.Worksite?>);

  @override
  _i2.Future<List<String>?> loadById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #loadById,
          [key],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<String>?> LoadBulk(
    String? apiPath,
    dynamic Function(_i21.Worksite)? comparer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #LoadBulk,
          [
            apiPath,
            comparer,
          ],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<_i21.Worksite>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i21.Worksite>?>.value(),
      ) as _i2.Future<List<_i21.Worksite>?>);

  @override
  _i2.Future<List<_i21.Worksite>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i21.Worksite>?>.value(),
      ) as _i2.Future<List<_i21.Worksite>?>);

  @override
  _i2.Future<List<_i21.Worksite>> storeBulk(List<_i21.Worksite>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i21.Worksite>>.value(<_i21.Worksite>[]),
      ) as _i2.Future<List<_i21.Worksite>>);

  @override
  _i2.Future<_i21.Worksite> store(
    String? key,
    _i21.Worksite? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i21.Worksite>.value(_FakeWorksite_1(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i21.Worksite>);

  @override
  _i2.Future<_i21.Worksite> storeUnprotected(
    String? key,
    _i21.Worksite? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i21.Worksite>.value(_FakeWorksite_1(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i21.Worksite>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String> serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<bool>.value(true),
        returnValueForMissingStub: _i2.Future<bool>.value(true),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            <String, String>{} as _i2.FutureOr<_i8.HashMap<String, String>>?),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ChecklistCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistCache extends _i1.Mock implements _i22.ChecklistCache {
  MockChecklistCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<List<_i18.Checklist>?> getChecklistForWorksite(
          _i21.Worksite? worksite) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChecklistForWorksite,
          [worksite],
        ),
        returnValue: _i2.Future<List<_i18.Checklist>?>.value(),
      ) as _i2.Future<List<_i18.Checklist>?>);

  @override
  _i2.Future<_i18.Checklist?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i18.Checklist?>.value(),
      ) as _i2.Future<_i18.Checklist?>);

  @override
  _i2.Future<List<String>?> loadById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #loadById,
          [key],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<String>?> LoadBulk(
    String? apiPath,
    dynamic Function(_i18.Checklist)? comparer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #LoadBulk,
          [
            apiPath,
            comparer,
          ],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<_i18.Checklist>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i18.Checklist>?>.value(),
      ) as _i2.Future<List<_i18.Checklist>?>);

  @override
  _i2.Future<List<_i18.Checklist>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i18.Checklist>?>.value(),
      ) as _i2.Future<List<_i18.Checklist>?>);

  @override
  _i2.Future<List<_i18.Checklist>> storeBulk(List<_i18.Checklist>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i18.Checklist>>.value(<_i18.Checklist>[]),
      ) as _i2.Future<List<_i18.Checklist>>);

  @override
  _i2.Future<_i18.Checklist> store(
    String? key,
    _i18.Checklist? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i18.Checklist>.value(_FakeChecklist_2(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i18.Checklist>);

  @override
  _i2.Future<_i18.Checklist> storeUnprotected(
    String? key,
    _i18.Checklist? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i18.Checklist>.value(_FakeChecklist_2(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i18.Checklist>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<bool>.value(true),
        returnValueForMissingStub: _i2.Future<bool>.value(true),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            <String, String>{} as _i2.FutureOr<_i8.HashMap<String, String>>?),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ChecklistDayCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDayCache extends _i1.Mock implements _i22.ChecklistDayCache {
  MockChecklistDayCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<List<_i18.ChecklistDay>?> getChecklistDaysForChecklist(
          _i18.Checklist? checklist) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChecklistDaysForChecklist,
          [checklist],
        ),
        returnValue: _i2.Future<List<_i18.ChecklistDay>?>.value(),
      ) as _i2.Future<List<_i18.ChecklistDay>?>);

  @override
  _i2.Future<_i18.ChecklistDay?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i18.ChecklistDay?>.value(),
      ) as _i2.Future<_i18.ChecklistDay?>);

  @override
  _i2.Future<List<String>?> loadById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #loadById,
          [key],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<String>?> LoadBulk(
    String? apiPath,
    dynamic Function(_i18.ChecklistDay)? comparer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #LoadBulk,
          [
            apiPath,
            comparer,
          ],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<_i18.ChecklistDay>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i18.ChecklistDay>?>.value(),
      ) as _i2.Future<List<_i18.ChecklistDay>?>);

  @override
  _i2.Future<List<_i18.ChecklistDay>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i18.ChecklistDay>?>.value(),
      ) as _i2.Future<List<_i18.ChecklistDay>?>);

  @override
  _i2.Future<List<_i18.ChecklistDay>> storeBulk(
          List<_i18.ChecklistDay>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue:
            _i2.Future<List<_i18.ChecklistDay>>.value(<_i18.ChecklistDay>[]),
      ) as _i2.Future<List<_i18.ChecklistDay>>);

  @override
  _i2.Future<_i18.ChecklistDay> store(
    String? key,
    _i18.ChecklistDay? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i18.ChecklistDay>.value(_FakeChecklistDay_3(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i18.ChecklistDay>);

  @override
  _i2.Future<_i18.ChecklistDay> storeUnprotected(
    String? key,
    _i18.ChecklistDay? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i18.ChecklistDay>.value(_FakeChecklistDay_3(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i18.ChecklistDay>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<bool>.value(true),
        returnValueForMissingStub: _i2.Future<bool>.value(true),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            <String, String>{} as _i2.FutureOr<_i8.HashMap<String, String>>?),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ItemCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemCache extends _i1.Mock implements _i23.ItemCache {
  MockItemCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.ItemFactory get parser => (super.noSuchMethod(
        Invocation.getter(#parser),
        returnValue: _FakeItemFactory_4(
          this,
          Invocation.getter(#parser),
        ),
      ) as _i19.ItemFactory);

  @override
  set parser(_i19.ItemFactory? _parser) => super.noSuchMethod(
        Invocation.setter(
          #parser,
          _parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<List<_i19.Item>?> loadChecklistItemsForChecklist(
          _i18.Checklist? checklist) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadChecklistItemsForChecklist,
          [checklist],
        ),
        returnValue: _i2.Future<List<_i19.Item>?>.value(),
      ) as _i2.Future<List<_i19.Item>?>);

  @override
  _i2.Future<_i8.HashMap<String, List<_i19.Item>>> getItemsForChecklistDay(
          _i18.ChecklistDay? checklistDay) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItemsForChecklistDay,
          [checklistDay],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, List<_i19.Item>>>.value(
            _i4.dummyValue<_i8.HashMap<String, List<_i19.Item>>>(
          this,
          Invocation.method(
            #getItemsForChecklistDay,
            [checklistDay],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, List<_i19.Item>>>);

  @override
  _i2.Future<_i19.Item?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i19.Item?>.value(),
      ) as _i2.Future<_i19.Item?>);

  @override
  _i2.Future<List<String>?> loadById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #loadById,
          [key],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<String>?> LoadBulk(
    String? apiPath,
    dynamic Function(_i19.Item)? comparer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #LoadBulk,
          [
            apiPath,
            comparer,
          ],
        ),
        returnValue: _i2.Future<List<String>?>.value(),
      ) as _i2.Future<List<String>?>);

  @override
  _i2.Future<List<_i19.Item>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i19.Item>?>.value(),
      ) as _i2.Future<List<_i19.Item>?>);

  @override
  _i2.Future<List<_i19.Item>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i19.Item>?>.value(),
      ) as _i2.Future<List<_i19.Item>?>);

  @override
  _i2.Future<List<_i19.Item>> storeBulk(List<_i19.Item>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i19.Item>>.value(<_i19.Item>[]),
      ) as _i2.Future<List<_i19.Item>>);

  @override
  _i2.Future<_i19.Item> store(
    String? key,
    _i19.Item? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i19.Item>.value(_FakeItem_5(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i19.Item>);

  @override
  _i2.Future<_i19.Item> storeUnprotected(
    String? key,
    _i19.Item? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i19.Item>.value(_FakeItem_5(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i19.Item>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<bool>.value(true),
        returnValueForMissingStub: _i2.Future<bool>.value(true),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            <String, String>{} as _i2.FutureOr<_i8.HashMap<String, String>>?),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [Worksite].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksite extends _i1.Mock implements _i21.Worksite {
  MockWorksite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set ownerId(String? _ownerId) => super.noSuchMethod(
        Invocation.setter(
          #ownerId,
          _ownerId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set companyId(String? _companyId) => super.noSuchMethod(
        Invocation.setter(
          #companyId,
          _companyId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set checklistIds(List<String>? _checklistIds) => super.noSuchMethod(
        Invocation.setter(
          #checklistIds,
          _checklistIds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [Checklist].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklist extends _i1.Mock implements _i18.Checklist {
  MockChecklist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get worksiteId => (super.noSuchMethod(
        Invocation.getter(#worksiteId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#worksiteId),
        ),
      ) as String);

  @override
  set worksiteId(String? _worksiteId) => super.noSuchMethod(
        Invocation.setter(
          #worksiteId,
          _worksiteId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, String> get checklistIdsByDate => (super.noSuchMethod(
        Invocation.getter(#checklistIdsByDate),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#checklistIdsByDate),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  set checklistIdsByDate(_i8.HashMap<String, String>? _checklistIdsByDate) =>
      super.noSuchMethod(
        Invocation.setter(
          #checklistIdsByDate,
          _checklistIdsByDate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  (bool, String?) getChecklistDayID(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #getChecklistDayID,
          [date],
        ),
        returnValue: (false, null),
      ) as (bool, String?));

  @override
  dynamic removeChecklistDay(_i14.BaseChecklistDay? checklistDay) =>
      super.noSuchMethod(Invocation.method(
        #removeChecklistDay,
        [checklistDay],
      ));

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ChecklistDay].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDay extends _i1.Mock implements _i18.ChecklistDay {
  MockChecklistDay() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistId => (super.noSuchMethod(
        Invocation.getter(#checklistId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistId),
        ),
      ) as String);

  @override
  set checklistId(String? _checklistId) => super.noSuchMethod(
        Invocation.setter(
          #checklistId,
          _checklistId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);

  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, List<String>> get itemsByCatagory => (super.noSuchMethod(
        Invocation.getter(#itemsByCatagory),
        returnValue: _i4.dummyValue<_i8.HashMap<String, List<String>>>(
          this,
          Invocation.getter(#itemsByCatagory),
        ),
      ) as _i8.HashMap<String, List<String>>);

  @override
  set itemsByCatagory(_i8.HashMap<String, List<String>>? _itemsByCatagory) =>
      super.noSuchMethod(
        Invocation.setter(
          #itemsByCatagory,
          _itemsByCatagory,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addCategory(String? category) => super.noSuchMethod(Invocation.method(
        #addCategory,
        [category],
      ));

  @override
  dynamic removeCategory(String? category) =>
      super.noSuchMethod(Invocation.method(
        #removeCategory,
        [category],
      ));

  @override
  dynamic addItemId(
    String? category,
    String? itemId,
  ) =>
      super.noSuchMethod(Invocation.method(
        #addItemId,
        [
          category,
          itemId,
        ],
      ));

  @override
  dynamic addItem(
    String? category,
    _i7.BaseItem? item,
  ) =>
      super.noSuchMethod(Invocation.method(
        #addItem,
        [
          category,
          item,
        ],
      ));

  @override
  dynamic removeItem(
    String? category,
    _i7.BaseItem? item,
  ) =>
      super.noSuchMethod(Invocation.method(
        #removeItem,
        [
          category,
          item,
        ],
      ));

  @override
  dynamic getItemsByCategory(String? category) =>
      super.noSuchMethod(Invocation.method(
        #getItemsByCategory,
        [category],
      ));

  @override
  dynamic getCategoryForItem(_i7.BaseItem? item) =>
      super.noSuchMethod(Invocation.method(
        #getCategoryForItem,
        [item],
      ));

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [Item].
///
/// See the documentation for Mockito's code generation for more information.
class MockItem extends _i1.Mock implements _i19.Item {
  MockItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistDayId => (super.noSuchMethod(
        Invocation.getter(#checklistDayId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistDayId),
        ),
      ) as String);

  @override
  set checklistDayId(String? _checklistDayId) => super.noSuchMethod(
        Invocation.setter(
          #checklistDayId,
          _checklistDayId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unit(String? _unit) => super.noSuchMethod(
        Invocation.setter(
          #unit,
          _unit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set desc(String? _desc) => super.noSuchMethod(
        Invocation.setter(
          #desc,
          _desc,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set result(String? _result) => super.noSuchMethod(
        Invocation.setter(
          #result,
          _result,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creatorId(String? _creatorId) => super.noSuchMethod(
        Invocation.setter(
          #creatorId,
          _creatorId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set verified(bool? _verified) => super.noSuchMethod(
        Invocation.setter(
          #verified,
          _verified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i20.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get companyId => (super.noSuchMethod(
        Invocation.getter(#companyId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#companyId),
        ),
      ) as String);

  @override
  set companyId(String? _companyId) => super.noSuchMethod(
        Invocation.setter(
          #companyId,
          _companyId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ChecklistDayFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDayFactory extends _i1.Mock
    implements _i18.ChecklistDayFactory {
  MockChecklistDayFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.ChecklistDay fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeChecklistDay_3(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i18.ChecklistDay);
}

/// A class which mocks [JsonFileAccess].
///
/// See the documentation for Mockito's code generation for more information.
class MockJsonFileAccess<T extends _i3.Entity> extends _i1.Mock
    implements _i17.JsonFileAccess<T> {
  MockJsonFileAccess() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.ReadWriteMutex get m => (super.noSuchMethod(
        Invocation.getter(#m),
        returnValue: _FakeReadWriteMutex_7(
          this,
          Invocation.getter(#m),
        ),
      ) as _i6.ReadWriteMutex);

  @override
  _i2.Future<List<T>?> readDataFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readDataFile,
          [path],
        ),
        returnValue: _i2.Future<List<T>?>.value(),
      ) as _i2.Future<List<T>?>);

  @override
  _i2.Future<bool> saveDataFile(
    String? path,
    List<T>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDataFile,
          [
            path,
            data,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteDataFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteDataFile,
          [path],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<bool> deleteFromDataFile(
    String? path,
    List<String>? keys,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFromDataFile,
          [
            path,
            keys,
          ],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<T?> readDataFileByKey(
    String? path,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readDataFileByKey,
          [
            path,
            key,
          ],
        ),
        returnValue: _i2.Future<T?>.value(),
      ) as _i2.Future<T?>);
}

/// A class which mocks [ChecklistFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistFactory extends _i1.Mock implements _i18.ChecklistFactory {
  MockChecklistFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Checklist fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeChecklist_2(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i18.Checklist);
}

/// A class which mocks [ItemFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemFactory extends _i1.Mock implements _i19.ItemFactory {
  MockItemFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Item fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeItem_5(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i19.Item);
}

/// A class which mocks [WorksiteFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksiteFactory extends _i1.Mock implements _i21.WorksiteFactory {
  MockWorksiteFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Worksite fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeWorksite_1(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i21.Worksite);
}

/// A concrete implementation of Item for testing purposes.
class TestItem extends Item {
  TestItem({
    required super.id,
    required super.checklistDayId,
    required super.dateUpdated,
    required super.dateCreated,
  });

  @override
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'checklistDayId': checklistDayId,
      'dateUpdated': dateUpdated.toIso8601String(),
    };
  }
}
