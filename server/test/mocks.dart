// Mocks generated by Mockito 5.4.4 from annotations
// in shared/test/cache_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:mockito/mockito.dart' as _i1;
import 'dart:async' as _i2;
import 'dart:collection' as _i8;
import 'dart:convert' as _i12;
import 'package:shared/src/base_entities/entity/entity.dart' as _i3;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:shared/src/base_services/cache/localStorage.dart' as _i5;
import 'package:mutex/mutex.dart' as _i6;
import 'package:shared/src/base_entities/item/item.dart' as _i7;
import 'package:Server/services/cache_service.dart' as _i9;
import 'package:shelf/src/request.dart' as _i10;
import 'package:stream_channel/stream_channel.dart' as _i11;
import 'package:Server/entity/checklist.dart' as _i12;
import 'package:Server/storage/checklist_cache.dart' as _i13;
import 'package:shared/checklist.dart' as _i14;
import 'package:Server/entity/worksite.dart' as _i15;
import 'package:Server/storage/worksite_cache.dart' as _i16;
import 'package:Server/entity/item.dart' as _i18;
import 'package:Server/storage/item_cache.dart' as _i17;
// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequest_1 extends _i1.SmartFake implements _i10.Request {
  _FakeRequest_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChecklist_0 extends _i1.SmartFake implements _i12.Checklist {
  _FakeChecklist_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChecklistDay_0 extends _i1.SmartFake implements _i12.ChecklistDay {
  _FakeChecklistDay_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorksite_0 extends _i1.SmartFake implements _i15.Worksite {
  _FakeWorksite_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeItem_0 extends _i1.SmartFake implements _i18.Item {
  _FakeItem_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Entity].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntity extends _i1.Mock implements _i3.Entity {
  MockEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  dynamic toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, String>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, String>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i5.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<MapEntry<String, String>> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: <MapEntry<String, String>>[],
      ) as List<MapEntry<String, String>>);

  @override
  _i2.Future<String?> getItem(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [key],
        ),
        returnValue: _i2.Future<String?>.value(),
      ) as _i2.Future<String?>);

  @override
  _i2.Future<void> setItem(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> removeItem(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [EntityFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityFactory<T extends _i3.Entity> extends _i1.Mock
    implements _i3.EntityFactory<T> {
  MockEntityFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic fromJson(Map<String, dynamic>? json) =>
      super.noSuchMethod(Invocation.method(
        #fromJson,
        [json],
      ));
}

/// A class which mocks [BaseItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseItem extends _i1.Mock implements _i7.BaseItem {
  MockBaseItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistDayId => (super.noSuchMethod(
        Invocation.getter(#checklistDayId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistDayId),
        ),
      ) as String);

  @override
  set checklistDayId(String? _checklistDayId) => super.noSuchMethod(
        Invocation.setter(
          #checklistDayId,
          _checklistDayId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unitId(String? _unitId) => super.noSuchMethod(
        Invocation.setter(
          #unitId,
          _unitId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set desc(String? _desc) => super.noSuchMethod(
        Invocation.setter(
          #desc,
          _desc,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set result(String? _result) => super.noSuchMethod(
        Invocation.setter(
          #result,
          _result,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creatorId(String? _creatorId) => super.noSuchMethod(
        Invocation.setter(
          #creatorId,
          _creatorId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set verified(bool? _verified) => super.noSuchMethod(
        Invocation.setter(
          #verified,
          _verified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ReadWriteMutex].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadWriteMutex extends _i1.Mock implements _i6.ReadWriteMutex {
  MockReadWriteMutex() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLocked => (super.noSuchMethod(
        Invocation.getter(#isLocked),
        returnValue: false,
      ) as bool);

  @override
  bool get isWriteLocked => (super.noSuchMethod(
        Invocation.getter(#isWriteLocked),
        returnValue: false,
      ) as bool);

  @override
  bool get isReadLocked => (super.noSuchMethod(
        Invocation.getter(#isReadLocked),
        returnValue: false,
      ) as bool);

  @override
  _i2.Future<dynamic> acquireRead() => (super.noSuchMethod(
        Invocation.method(
          #acquireRead,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);

  @override
  _i2.Future<dynamic> acquireWrite() => (super.noSuchMethod(
        Invocation.method(
          #acquireWrite,
          [],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<T> protectRead<T>(_i2.Future<T> Function()? criticalSection) =>
      (super.noSuchMethod(
        Invocation.method(
          #protectRead,
          [criticalSection],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #protectRead,
                  [criticalSection],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #protectRead,
                [criticalSection],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> protectWrite<T>(_i2.Future<T> Function()? criticalSection) =>
      (super.noSuchMethod(
        Invocation.method(
          #protectWrite,
          [criticalSection],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #protectWrite,
                  [criticalSection],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #protectWrite,
                [criticalSection],
              ),
            ),
      ) as _i2.Future<T>);
}

class TestReadWriteMutex extends MockReadWriteMutex {
  bool _isWriteLocked = false;

  @override
  bool get isWriteLocked => _isWriteLocked;

  @override
  Future<T> protectWrite<T>(Future<T> Function()? criticalSection) async {
    _isWriteLocked = true;
    try {
      if (criticalSection != null) {
        return await criticalSection();
      } else {
        throw ArgumentError('criticalSection cannot be null');
      }
    } finally {
      _isWriteLocked = false;
    }
  }

  @override
  Future<T> protectRead<T>(Future<T> Function()? criticalSection) async {
    if (criticalSection != null) {
      return await criticalSection();
    } else {
      throw ArgumentError('criticalSection cannot be null');
    }
  }
}

class FakeLocalStorage implements _i5.LocalStorage {
  final Map<String, String> _storage = {};

  @override
  Future<String?> getItem(String key) async {
    return _storage[key];
  }

  @override
  Future<void> setItem(String key, String value) async {
    _storage[key] = value;
  }

  @override
  Future<void> removeItem(String key) async {
    _storage.remove(key);
  }

  @override
  List<String> get keys => _storage.keys.toList();

  @override
  List<String> get values => _storage.values.toList();

  @override
  List<MapEntry<String, String>> get entries => _storage.entries.toList();
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService<T extends _i3.Entity> extends _i1.Mock
    implements _i9.CacheService<T> {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<T?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<T?>.value(),
      ) as _i2.Future<T?>);

  @override
  _i2.Future<List<T>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<T>?>.value(),
      ) as _i2.Future<List<T>?>);

  @override
  _i2.Future<List<T>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<T>?>.value(),
      ) as _i2.Future<List<T>?>);

  @override
  _i2.Future<List<T>> storeBulk(List<T>? entities) => (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<T>>.value(<T>[]),
      ) as _i2.Future<List<T>>);

  @override
  _i2.Future<T> store(
    String? key,
    T? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #store,
                  [
                    key,
                    entityValue,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #store,
                [
                  key,
                  entityValue,
                ],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> storeUnprotected(
    String? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #storeUnprotected,
                  [
                    key,
                    value,
                  ],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #storeUnprotected,
                [
                  key,
                  value,
                ],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.method(
            #getCacheCheckStates,
            [],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequest extends _i1.Mock implements _i10.Request {
  MockRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#url),
        ),
      ) as Uri);

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  String get handlerPath => (super.noSuchMethod(
        Invocation.getter(#handlerPath),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#handlerPath),
        ),
      ) as String);

  @override
  String get protocolVersion => (super.noSuchMethod(
        Invocation.getter(#protocolVersion),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
      ) as String);

  @override
  Uri get requestedUri => (super.noSuchMethod(
        Invocation.getter(#requestedUri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#requestedUri),
        ),
      ) as Uri);

  @override
  bool get canHijack => (super.noSuchMethod(
        Invocation.getter(#canHijack),
        returnValue: false,
      ) as bool);

  @override
  Map<String, Object> get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: <String, Object>{},
      ) as Map<String, Object>);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, List<String>> get headersAll => (super.noSuchMethod(
        Invocation.getter(#headersAll),
        returnValue: <String, List<String>>{},
      ) as Map<String, List<String>>);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  _i10.Request change({
    Map<String, Object?>? headers,
    Map<String, Object?>? context,
    String? path,
    Object? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #change,
          [],
          {
            #headers: headers,
            #context: context,
            #path: path,
            #body: body,
          },
        ),
        returnValue: _FakeRequest_1(
          this,
          Invocation.method(
            #change,
            [],
            {
              #headers: headers,
              #context: context,
              #path: path,
              #body: body,
            },
          ),
        ),
      ) as _i10.Request);

  @override
  Never hijack(void Function(_i11.StreamChannel<List<int>>)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #hijack,
          [callback],
        ),
        returnValue: null,
      ) as Never);

  @override
  _i2.Stream<List<int>> read() => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
        ),
        returnValue: _i2.Stream<List<int>>.empty(),
      ) as _i2.Stream<List<int>>);

  @override
  _i2.Future<String> readAsString([_i12.Encoding? encoding]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [encoding],
        ),
        returnValue: _i2.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [encoding],
          ),
        )),
      ) as _i2.Future<String>);
}

/// A class which mocks [ChecklistDayCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDayCache extends _i1.Mock implements _i13.ChecklistDayCache {
  MockChecklistDayCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<_i12.ChecklistDay?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i12.ChecklistDay?>.value(),
      ) as _i2.Future<_i12.ChecklistDay?>);

  @override
  _i2.Future<List<_i12.ChecklistDay>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i12.ChecklistDay>?>.value(),
      ) as _i2.Future<List<_i12.ChecklistDay>?>);

  @override
  _i2.Future<List<_i12.ChecklistDay>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i12.ChecklistDay>?>.value(),
      ) as _i2.Future<List<_i12.ChecklistDay>?>);

  @override
  _i2.Future<List<_i12.ChecklistDay>> storeBulk(
          List<_i12.ChecklistDay>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue:
            _i2.Future<List<_i12.ChecklistDay>>.value(<_i12.ChecklistDay>[]),
      ) as _i2.Future<List<_i12.ChecklistDay>>);

  @override
  _i2.Future<_i12.ChecklistDay> store(
    String? key,
    _i12.ChecklistDay? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i12.ChecklistDay>.value(_FakeChecklistDay_0(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i12.ChecklistDay>);

  @override
  _i2.Future<_i12.ChecklistDay> storeUnprotected(
    String? key,
    _i12.ChecklistDay? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i12.ChecklistDay>.value(_FakeChecklistDay_0(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i12.ChecklistDay>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.method(
            #getCacheCheckStates,
            [],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ChecklistDayFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDayFactory extends _i1.Mock
    implements _i12.ChecklistDayFactory {
  MockChecklistDayFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.ChecklistDay fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeChecklistDay_0(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i12.ChecklistDay);
}

/// A class which mocks [ChecklistDay].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistDay extends _i1.Mock implements _i12.ChecklistDay {
  MockChecklistDay() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistId => (super.noSuchMethod(
        Invocation.getter(#checklistId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistId),
        ),
      ) as String);

  @override
  set checklistId(String? _checklistId) => super.noSuchMethod(
        Invocation.setter(
          #checklistId,
          _checklistId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);

  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, List<String>> get itemsByCatagory => (super.noSuchMethod(
        Invocation.getter(#itemsByCatagory),
        returnValue: _i4.dummyValue<_i8.HashMap<String, List<String>>>(
          this,
          Invocation.getter(#itemsByCatagory),
        ),
      ) as _i8.HashMap<String, List<String>>);

  @override
  set itemsByCatagory(_i8.HashMap<String, List<String>>? _itemsByCatagory) =>
      super.noSuchMethod(
        Invocation.setter(
          #itemsByCatagory,
          _itemsByCatagory,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic addCategory(String? category) => super.noSuchMethod(Invocation.method(
        #addCategory,
        [category],
      ));

  @override
  dynamic removeCategory(String? category) =>
      super.noSuchMethod(Invocation.method(
        #removeCategory,
        [category],
      ));

  @override
  dynamic addItemId(
    String? category,
    String? itemId,
  ) =>
      super.noSuchMethod(Invocation.method(
        #addItemId,
        [
          category,
          itemId,
        ],
      ));

  @override
  dynamic addItem(
    String? category,
    _i7.BaseItem? item,
  ) =>
      super.noSuchMethod(Invocation.method(
        #addItem,
        [
          category,
          item,
        ],
      ));

  @override
  dynamic removeItem(
    String? category,
    _i7.BaseItem? item,
  ) =>
      super.noSuchMethod(Invocation.method(
        #removeItem,
        [
          category,
          item,
        ],
      ));

  @override
  dynamic getItemsByCategory(String? category) =>
      super.noSuchMethod(Invocation.method(
        #getItemsByCategory,
        [category],
      ));

  @override
  dynamic getCategoryForItem(_i7.BaseItem? item) =>
      super.noSuchMethod(Invocation.method(
        #getCategoryForItem,
        [item],
      ));

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJsonTransfer() => (super.noSuchMethod(
        Invocation.method(
          #toJsonTransfer,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJsonTransfer,
            [],
          ),
        ),
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
}

/// A class which mocks [ChecklistCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistCache extends _i1.Mock implements _i13.ChecklistCache {
  MockChecklistCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<_i12.Checklist?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i12.Checklist?>.value(),
      ) as _i2.Future<_i12.Checklist?>);

  @override
  _i2.Future<List<_i12.Checklist>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i12.Checklist>?>.value(),
      ) as _i2.Future<List<_i12.Checklist>?>);

  @override
  _i2.Future<List<_i12.Checklist>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i12.Checklist>?>.value(),
      ) as _i2.Future<List<_i12.Checklist>?>);

  @override
  _i2.Future<List<_i12.Checklist>> storeBulk(List<_i12.Checklist>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i12.Checklist>>.value(<_i12.Checklist>[]),
      ) as _i2.Future<List<_i12.Checklist>>);

  @override
  _i2.Future<_i12.Checklist> store(
    String? key,
    _i12.Checklist? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i12.Checklist>.value(_FakeChecklist_0(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i12.Checklist>);

  @override
  _i2.Future<_i12.Checklist> storeUnprotected(
    String? key,
    _i12.Checklist? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i12.Checklist>.value(_FakeChecklist_0(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i12.Checklist>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.method(
            #getCacheCheckStates,
            [],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ChecklistFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklistFactory extends _i1.Mock implements _i12.ChecklistFactory {
  MockChecklistFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Checklist fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeChecklist_0(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i12.Checklist);
}

/// A class which mocks [Checklist].
///
/// See the documentation for Mockito's code generation for more information.
class MockChecklist extends _i1.Mock implements _i12.Checklist {
  MockChecklist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get worksiteId => (super.noSuchMethod(
        Invocation.getter(#worksiteId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#worksiteId),
        ),
      ) as String);

  @override
  set worksiteId(String? _worksiteId) => super.noSuchMethod(
        Invocation.setter(
          #worksiteId,
          _worksiteId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.HashMap<String, String> get checklistIdsByDate => (super.noSuchMethod(
        Invocation.getter(#checklistIdsByDate),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#checklistIdsByDate),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  set checklistIdsByDate(_i8.HashMap<String, String>? _checklistIdsByDate) =>
      super.noSuchMethod(
        Invocation.setter(
          #checklistIdsByDate,
          _checklistIdsByDate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic removeChecklistDay(_i14.BaseChecklistDay? checklistDay) =>
      super.noSuchMethod(Invocation.method(
        #removeChecklistDay,
        [checklistDay],
      ));

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJsonTransfer() => (super.noSuchMethod(
        Invocation.method(
          #toJsonTransfer,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJsonTransfer,
            [],
          ),
        ),
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
}

/// A class which mocks [WorksiteCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksiteCache extends _i1.Mock implements _i16.WorksiteCache {
  MockWorksiteCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<_i15.Worksite?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i15.Worksite?>.value(),
      ) as _i2.Future<_i15.Worksite?>);

  @override
  _i2.Future<List<_i15.Worksite>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i15.Worksite>?>.value(),
      ) as _i2.Future<List<_i15.Worksite>?>);

  @override
  _i2.Future<List<_i15.Worksite>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i15.Worksite>?>.value(),
      ) as _i2.Future<List<_i15.Worksite>?>);

  @override
  _i2.Future<List<_i15.Worksite>> storeBulk(List<_i15.Worksite>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i15.Worksite>>.value(<_i15.Worksite>[]),
      ) as _i2.Future<List<_i15.Worksite>>);

  @override
  _i2.Future<_i15.Worksite> store(
    String? key,
    _i15.Worksite? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i15.Worksite>.value(_FakeWorksite_0(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i15.Worksite>);

  @override
  _i2.Future<_i15.Worksite> storeUnprotected(
    String? key,
    _i15.Worksite? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i15.Worksite>.value(_FakeWorksite_0(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i15.Worksite>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.method(
            #getCacheCheckStates,
            [],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [WorksiteFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksiteFactory extends _i1.Mock implements _i15.WorksiteFactory {
  MockWorksiteFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Worksite fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeWorksite_0(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i15.Worksite);
}

/// A class which mocks [Worksite].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorksite extends _i1.Mock implements _i15.Worksite {
  MockWorksite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set ownerId(String? _ownerId) => super.noSuchMethod(
        Invocation.setter(
          #ownerId,
          _ownerId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set companyId(String? _companyId) => super.noSuchMethod(
        Invocation.setter(
          #companyId,
          _companyId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set checklistIds(List<String>? _checklistIds) => super.noSuchMethod(
        Invocation.setter(
          #checklistIds,
          _checklistIds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJsonTransfer() => (super.noSuchMethod(
        Invocation.method(
          #toJsonTransfer,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJsonTransfer,
            [],
          ),
        ),
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
}

/// A class which mocks [ItemCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemCache extends _i1.Mock implements _i17.ItemCache {
  MockItemCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.HashMap<String, String> get cacheCheckSums => (super.noSuchMethod(
        Invocation.getter(#cacheCheckSums),
        returnValue: _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.getter(#cacheCheckSums),
        ),
      ) as _i8.HashMap<String, String>);

  @override
  _i8.HashMap<String, bool> get cacheSyncFlags => (super.noSuchMethod(
        Invocation.getter(#cacheSyncFlags),
        returnValue: _i4.dummyValue<_i8.HashMap<String, bool>>(
          this,
          Invocation.getter(#cacheSyncFlags),
        ),
      ) as _i8.HashMap<String, bool>);

  @override
  _i2.Future<_i18.Item?> getById(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [key],
        ),
        returnValue: _i2.Future<_i18.Item?>.value(),
      ) as _i2.Future<_i18.Item?>);

  @override
  _i2.Future<List<_i18.Item>?> getAll(
          _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [onCacheMiss],
        ),
        returnValue: _i2.Future<List<_i18.Item>?>.value(),
      ) as _i2.Future<List<_i18.Item>?>);

  @override
  _i2.Future<List<_i18.Item>?> get(
    List<String>? keys,
    _i2.Future<List<String>?> Function(List<String>?)? onCacheMiss,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            keys,
            onCacheMiss,
          ],
        ),
        returnValue: _i2.Future<List<_i18.Item>?>.value(),
      ) as _i2.Future<List<_i18.Item>?>);

  @override
  _i2.Future<List<_i18.Item>> storeBulk(List<_i18.Item>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeBulk,
          [entities],
        ),
        returnValue: _i2.Future<List<_i18.Item>>.value(<_i18.Item>[]),
      ) as _i2.Future<List<_i18.Item>>);

  @override
  _i2.Future<_i18.Item> store(
    String? key,
    _i18.Item? entityValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #store,
          [
            key,
            entityValue,
          ],
        ),
        returnValue: _i2.Future<_i18.Item>.value(_FakeItem_0(
          this,
          Invocation.method(
            #store,
            [
              key,
              entityValue,
            ],
          ),
        )),
      ) as _i2.Future<_i18.Item>);

  @override
  _i2.Future<_i18.Item> storeUnprotected(
    String? key,
    _i18.Item? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeUnprotected,
          [
            key,
            value,
          ],
        ),
        returnValue: _i2.Future<_i18.Item>.value(_FakeItem_0(
          this,
          Invocation.method(
            #storeUnprotected,
            [
              key,
              value,
            ],
          ),
        )),
      ) as _i2.Future<_i18.Item>);

  @override
  _i2.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteUnprotected(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteUnprotected,
          [key],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> setCacheSyncFlags(
          _i8.HashMap<String, String>? serverCheckSums) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCacheSyncFlags,
          [serverCheckSums],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<_i8.HashMap<String, String>> getCacheCheckStates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheCheckStates,
          [],
        ),
        returnValue: _i2.Future<_i8.HashMap<String, String>>.value(
            _i4.dummyValue<_i8.HashMap<String, String>>(
          this,
          Invocation.method(
            #getCacheCheckStates,
            [],
          ),
        )),
      ) as _i2.Future<_i8.HashMap<String, String>>);
}

/// A class which mocks [ItemFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockItemFactory extends _i1.Mock implements _i18.ItemFactory {
  MockItemFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Item fromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValue: _FakeItem_0(
          this,
          Invocation.method(
            #fromJson,
            [json],
          ),
        ),
      ) as _i18.Item);
}

/// A class which mocks [Item].
///
/// See the documentation for Mockito's code generation for more information.
class MockItem extends _i1.Mock implements _i18.Item {
  MockItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get checklistDayId => (super.noSuchMethod(
        Invocation.getter(#checklistDayId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#checklistDayId),
        ),
      ) as String);

  @override
  set checklistDayId(String? _checklistDayId) => super.noSuchMethod(
        Invocation.setter(
          #checklistDayId,
          _checklistDayId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unitId(String? _unitId) => super.noSuchMethod(
        Invocation.setter(
          #unitId,
          _unitId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set desc(String? _desc) => super.noSuchMethod(
        Invocation.setter(
          #desc,
          _desc,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set result(String? _result) => super.noSuchMethod(
        Invocation.setter(
          #result,
          _result,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comment(String? _comment) => super.noSuchMethod(
        Invocation.setter(
          #comment,
          _comment,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creatorId(String? _creatorId) => super.noSuchMethod(
        Invocation.setter(
          #creatorId,
          _creatorId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set verified(bool? _verified) => super.noSuchMethod(
        Invocation.setter(
          #verified,
          _verified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateCreated => (super.noSuchMethod(
        Invocation.getter(#dateCreated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateCreated),
        ),
      ) as DateTime);

  @override
  set dateCreated(DateTime? _dateCreated) => super.noSuchMethod(
        Invocation.setter(
          #dateCreated,
          _dateCreated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get dateUpdated => (super.noSuchMethod(
        Invocation.getter(#dateUpdated),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#dateUpdated),
        ),
      ) as DateTime);

  @override
  set dateUpdated(DateTime? _dateUpdated) => super.noSuchMethod(
        Invocation.setter(
          #dateUpdated,
          _dateUpdated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get flagForDeletion => (super.noSuchMethod(
        Invocation.getter(#flagForDeletion),
        returnValue: false,
      ) as bool);

  @override
  set flagForDeletion(bool? _flagForDeletion) => super.noSuchMethod(
        Invocation.setter(
          #flagForDeletion,
          _flagForDeletion,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String joinData() => (super.noSuchMethod(
        Invocation.method(
          #joinData,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #joinData,
            [],
          ),
        ),
      ) as String);

  @override
  String getChecksum() => (super.noSuchMethod(
        Invocation.method(
          #getChecksum,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getChecksum,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJsonTransfer() => (super.noSuchMethod(
        Invocation.method(
          #toJsonTransfer,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJsonTransfer,
            [],
          ),
        ),
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<Map<String, dynamic>>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as Map<String, dynamic>);
}
